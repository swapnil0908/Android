package com.example.swapnil.clapcam;
import android.app.VoiceInteractor;
import android.app.VoiceInteractor.PickOptionRequest;
import android.app.VoiceInteractor.PickOptionRequest.Option;
import android.view.Gravity;
import android.widget.TextView;
import java.util.Timer;
import java.util.TimerTask;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.Manifest;
import android.content.pm.PackageManager;
import android.provider.MediaStore;
import android.widget.Toast;
//import android.hardware.Camera2;
//import android.hardware.camera2.CameraAccessException;
//import android.util.log;

public class VoiceCommand extends Activity {
    @Override
    protected void onCreate(Bundle SavedInstanceState) {
        super.onCreate(SavedInstanceState);
        Intent intent = getIntent();
    }
}
//        if (intent != null) {
//            if (CameraActivity.needPermission(this)) {
//                startActivity(new Intent(this, CameraActivity.class).setflags(Intent.FLAG_ACTIVITY_NEW_TASK));
//                finish();
//                return;
//
//            }
//        } else if (intent == null) {
//            finish();
//        }
           else if (!isVoiceInteraction()) {
            Log.e(TAG, "Not voice interaction");
            if (intent != null) {
                intent.setComponent(null);
                intent.setPackage("com.google.android.GoogleCamera");
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                startActivity(intent);
            }
//        setContentView(R.layout.activity_camera);
//        CameraFragment fragment = CameraFragme.newInstance();
//        fragment.setArguments(getIntent().getExtras());
//    }
//}
private static final int PERMISSIONS_REQUEST_ALL_PERMISSIONS = 1;
private Bundle mSavedInstanceState;

protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    Intent intent = getIntent();

    if (needPermissions(this)) {
        requestPermissions();
        }
    else if (intent != null) {
        intent.setComponent(null);
        intent.setPackage("com.google.android.GoogleCamera");
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(intent);
        finish();
    } else {
        finish();
    }
}

static public boolean needPermissions(Activity activity) {
    Log.d(TAG, "needPermissions: ");
    return activity.checkSelfPermission(Manifest.permission.CAMERA)
            != PackageManager.PERMISSION_GRANTED
            || activity.checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
            != PackageManager.PERMISSION_GRANTED;
}

private void requestPermissions() {
    Log.d(TAG, "requestPermissions: ");
    String[] permissions = new String[] {
        Manifest.permission.CAMERA,
        Manifest.permission.WRITE_EXTERNAL_STORAGE,
    };
    requestPermissions(permissions, PERMISSIONS_REQUEST_ALL_PERMISSIONS);
}



public void onRequestPermissionsResult(int requestCode, String permissions[],
                                           int[] grantResults) {
    switch (requestCode) {
        case PERMISSIONS_REQUEST_ALL_PERMISSIONS:
            boolean hasAllPermissions = true;
            for (int i = 0; i < grantResults.length; ++i) {
                if (grantResults[i] != PackageManager.PERMISSION_GRANTED) {
                    hasAllPermissions = false;
                    Log.e(TAG, "Unable to get permission " + permissions[i]);
                }
            }
            if (hasAllPermissions) {
                finish();
            } else {
                Toast.makeText(this,
                        "Unable to get all required permissions", Toast.LENGTH_LONG).show();
                finish();
                return;
            }
            break;
        default:
            Log.e(TAG, "Unexpected request code");
    }
}


@Override
public void onResume() {
    super.onResume();
    Log.d(TAG, "onResume: ");
    startBackgroundThread();

    // When the screen is turned off and turned back on, the SurfaceTexture is already
    // available, and "onSurfaceTextureAvailable" will not be called. In that case, we can open
    // a camera and start preview from here (otherwise, we wait until the surface is ready in
    // the SurfaceTextureListener).
    if (mTextureView.isAvailable()) {
        openCamera(mTextureView.getWidth(), mTextureView.getHeight());
    } else {
        mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);
    }

    if (mOrientationListener.canDetectOrientation()) {
        mOrientationListener.enable();
    }

    if (getActivity().isVoiceInteraction()) {
        if (isTimerSpecified()) {
            startVoiceTimer();
        } else {
            startVoiceTrigger();
        }
    }
}

private void startVoiceTrigger() {
    Log.d(TAG, "startVoiceTrigger: ");
    Option option = new Option("cheese");
    option.addSynonym("ready");
    option.addSynonym("go");
    option.addSynonym("take it");
    option.addSynonym("ok");

    getActivity().getVoiceInteractor()
        .submitRequest(new PickOptionRequest("Open Camera", new Option[]{option}, null) {
            @Override
            public void onPickOptionResult(boolean finished, Option[] selections, Bundle result) {
                if (finished && selections.length == 1) {
                    Message message = Message.obtain();
                    message.obj = result;
                    takePicture();
                } else {
                    getActivity().finish();
                }
            }
            @Override
            public void onCancel() {
                getActivity().finish();
            }
        });
}

public static CameraFragment newInstance() {
    Log.d(TAG, "newInstance: ");
    CameraFragment fragment = new CameraFragment();
    fragment.setRetainInstance(true);
    return fragment;
}


